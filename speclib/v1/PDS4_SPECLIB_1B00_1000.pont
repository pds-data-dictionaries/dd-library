(defclass Measurement_Instrument "The Measurement_Instrument class contains attributes that identify the instrument that made the measurement. "
  (is-a USER)
  (role concrete)
  (single-slot instrument_name
;+       (comment "The instrument_name element provides a descriptive name of the instrument that made a spectral measurement.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
)
(defclass Measurement_Parameters "The Measurement_Parameters class contains attributes relevant to a single measurement of a specimen. "
  (is-a USER)
  (role concrete)
  (single-slot segment_number
;+       (comment "The segment_number element identifies which segment of a merged spectrum is described by a Measurement_Parameters class. The first segment is segment number 1. If the spectrum is not merged from multiple segments, then the value of segment_number is 1.")
    (type INTEGER)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot measurement_type
;+       (comment "The measurement_type element identifies the type of spectroscopy performed on a specimen.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
;+		(value "Attenuated_Total_Reflectance" "Emission" "LIBS" "Raman" "Reflectance" "Transmission" "X-Ray_Diffraction" "X-Ray_Fluorescence" )
  )
  (single-slot spectral_range_parameter_name
;+       (comment "The spectral_range_parameter_name element identifies the name of the parameter which determines the sampling interval of the measurement.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
;+		(value "Angle" "Energy" "Frequency" "Time" "Wavelength" "Wavenumber" )
  )
  (single-slot spectral_range_min
;+       (comment "The spectral_range_min element identifies the minimum value at which a given data item was sampled. For example, a spectrum that was measured in the 0.4 to 3.5 um spectral range would have a spectral_range_min value of 0.4.")
    (type FLOAT)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot spectral_range_max
;+       (comment "The spectral_range_max element identifies the maximum value at which a given data item was sampled. For example, a spectrum that was measured in the 0.4 to 3.5 um spectral range would have a spectral_range_max value of 3.5.")
    (type FLOAT)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot spectral_range_unit
;+       (comment "The spectral_range_unit element identifies the unit of measure for the values specified by spectral_range_min and spectral_range_max.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot spectral_sampling_interval_min
;+       (comment "The spectral_sampling_interval_min element identifies the minimum distance between band centers in a given spectrum. If all band centers are equally spaced, spectral_sampling_interval_min and spectral_sampling_interval_max will have the same value.")
    (type FLOAT)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot spectral_sampling_interval_max
;+       (comment "The spectral_sampling_interval_max element identifies the maximum distance between band centers in a given spectrum. If all band centers are equally spaced, spectral_sampling_interval_min and spectral_sampling_interval_max will have the same value.")
    (type FLOAT)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot spectral_sampling_interval_unit
;+       (comment "The spectral_sampling_interval_unit element identifies the unit of measure for the values specified by spectral_sampling_interval_min and spectral_sampling_interval_max.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot spectral_resolution_width_min
;+       (comment "The spectral_resolution_width_min element identifies the minimum width of a spectral band in a given spectrum. If all bands are the same width, spectral_resolution_width_min and spectral_resolution_width_max will have the same value.")
    (type FLOAT)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot spectral_resolution_width_max
;+       (comment "The spectral_resolution_width_max element identifies the maximum width of a spectral band in a given spectrum. If all bands are the same width, spectral_resolution_width_min and spectral_resolution_width_max will have the same value.")
    (type FLOAT)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot spectral_resolution_width_unit
;+       (comment "The spectral_resolution_width_unit element identifies the unit of measure for the values specified by spectral_resolution_width_min and spectral_resolution_width_max.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot measurement_reference_standard
;+       (comment "The measurement_reference_standard element identifies the standard object on which observations are performed in order to calibrate a measurement.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot measurement_geometry_type
;+       (comment "The measurement_geometry_type element identifies the type of geometry at which a measurement is taken.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
;+		(value "Biconical" "Bidirectional" "Directional_Hemispherical" "Hemispherical_Hemispherical" "Unknown" )
  )
  (single-slot incidence_angle
;+       (comment "The incidence_angle element provides the angle between the local vertical at the intercept point and a vector from the intercept point to the detector.")
    (type FLOAT)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot emission_angle
;+       (comment "The emission_angle element provides the angle between the local vertical at the intercept point and a vector from the intercept point to the sensor.")
    (type FLOAT)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot phase_angle
;+       (comment "The phase_angle element provides the angle between incidence and emission vectors.")
    (type FLOAT)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot measurement_source_description
;+       (comment "The measurement_source_description element identifies the source used for the measurement such as the type of lamp, heating element, laser, or radioactive source.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot measurement_atmosphere_pressure
;+       (comment "The measurement_atmosphere_pressure element provides the atmospheric pressure of the measurement environment.")
    (type FLOAT)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot measurement_atmosphere_temperature
;+       (comment "The measurement_atmosphere_temperature element provides the temperature of the measurement environment.")
    (type FLOAT)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot measurement_atmosphere_relative_humidity
;+       (comment "The measurement_atmosphere_relative_humidity element provides the relative humidity of the measurement environment.")
    (type FLOAT)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot measurement_atmosphere_composition
;+       (comment "The measurement_atmosphere_composition element identifies any gas%28es%29 present in measurement environment.")
    (type TBD_Protege_Type)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot measurement_atmosphere_description
;+       (comment "The measurement_atmosphere_description decribes the atmospheric conditions through which the data was taken.")
    (type TBD_Protege_Type)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot measurement_date_time
;+       (comment "The measurement_date_time element identifies the date and time of the observation and measurement.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot data_producer_name
;+       (comment "The data_producer_name element provides the name of the creator of the product. For products in RELAB, the value of data_producer_name is always %22RELAB%22.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot data_provider_name
;+       (comment "The data_provider_name element provides the full name of the person who submitted the product to the library.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (multislot measurement_requestor
;+       (comment "The measurement_requestor element identifies the individual or laboratory who requested the measurement. It may occur more than once.")
    (type STRING)
;        (cardinality 1 ?VARIABLE)
    (create-accessor read-write)
  )
  (single-slot measurement_notes
;+       (comment "The measurement_notes element contains relevant notes about how a measurement was made.")
    (type TBD_Protege_Type)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
)
(defclass Specimen_Classification "The Specimen_Classification class provides information about how a specimen has been classified."
  (is-a USER)
  (role concrete)
  (multislot specimen_type
;+       (comment "The specimen_type element gives one or more terms that classify the origin of the specimen. ")
    (type STRING)
;        (cardinality 1 ?VARIABLE)
    (create-accessor read-write)
;+		(value "Lunar_Meteorite" "Mars_Meteorite" "Other_Meteorite" "Returned_Asteroid_Sample" "Returned_Lunar_Sample" "Synthetic_Sample" "Terrestrial_Sample" )
  )
  (single-slot material_common_name
;+       (comment "The material_common_name element gives the specific name of the specimen material, as specifically as it is known. For example, if a specimen is pure olivine, put %22Olivine%22. If a specimen is a mixture of kaolinite and opal, put %22Kaolinite%2FOpal%22. Indicate if %22Unidentified%22.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot material_origin
;+       (comment "The material_origin element identifies whether the specimen is natural or synthetic.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
;+		(value "Natural" "Synthetic" )
  )
  (single-slot synthetic_type
;+       (comment "The synthetic_type element identifies the process by which the specimen was produced synthetically.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
;+		(value "Entirely_Synthetic" "From_Natural" "Hardware" "Natural_and_Synthetic" )
  )
  (single-slot material_state
;+       (comment "The material_state element identifies the physical state of the specimen.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
;+		(value "Gas" "Liquid" "Solid" )
  )
  (single-slot organic_type
;+       (comment "The organic_type element identifies the organic type to which the specimen belongs.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
;+		(value "Inorganic" "Mixture" "Organic" )
  )
  (single-slot material_type
;+       (comment "The material_type element indicates the general type of the specimen.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
;+		(value "Amorphous" "Consolidated_Mixture" "Element" "Ice" "Mineral" "Organic" "Rock" "Single_Particle" "Unconsolidated_Mixture" )
  )
  (multislot material_subtype
;+       (comment "The material_subtype element identifies the material subtype of the specimen.")
    (type STRING)
;        (cardinality 0 10)
    (create-accessor read-write)
  )
  (multislot mineral_type
;+       (comment "The mineral_type element identifies the type of mineral to which the specimen belongs.")
    (type STRING)
;        (cardinality 0 ?VARIABLE)
    (create-accessor read-write)
;+		(value "Arsenate" "Borate" "Carbonate" "Chromate" "Cyclosilicate" "Halide" "Hydroxide" "Inosilicate" "Iodate" "Native_Element" "Nesosilicate" "Nitrate" "Organic_Compound" "Oxide" "Phosphate" "Phyllosilicate" "Sorosilicate" "Sulfate" "Sulfide" "Tectosilicate" "Unclassified" "Vanadate" )
  )
  (multislot mineral_subtype
;+       (comment "The mineral_subtype element identifies the mineral subtype of the specimen.")
    (type STRING)
;        (cardinality 0 10)
    (create-accessor read-write)
  )
  (single-slot rock_type
;+       (comment "The rock_type element identifies the type of rock the specimen is.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
;+		(value "Igneous" "Metamorphic" "Sedimentary" "Unknown" )
  )
  (multislot rock_subtype
;+       (comment "The rock_subtype element identifies the rock subtype of the specimen.")
    (type STRING)
;        (cardinality 0 10)
    (create-accessor read-write)
  )
  (single-slot volatile_type
;+       (comment "The volatile_type element indicates whether the material was volatile-poor %28less than 2.0% LOI%29 or volatile-rich %28greater than 2.0% LOI%29. ")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
;+		(value "Poor" "Rich" "Unknown" )
  )
  (single-slot synthetic_processing_description
;+       (comment "The synthetic_processing_description element describes how a synthetic specimen has been processed.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
)
(defclass Specimen_Parameters "The Specimen_Parameters class provides information about a specimen for which measurements have been made."
  (is-a USER)
  (role concrete)
  (single-slot specimen_id
;+       (comment "The specimen_id element uniquely identifies the specimen.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot specimen_name
;+       (comment "The specimen_name element identifies the specimen as it is named where it is being kept.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot specimen_description
;+       (comment "The specimen_description element provides a short description of the specimen.")
    (type TBD_Protege_Type)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot source_specimen_id
;+       (comment "The source_specimen_id element identifies the source specimen from which the observed specimen is derived.")
    (type STRING)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot specimen_min_size
;+       (comment "The specimen_min_size element identifies the minimum particle size of the observed specimen.")
    (type FLOAT)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot specimen_max_size
;+       (comment "The specimen_max_size element identifies the maximum particle size of the observed specimen.")
    (type FLOAT)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot specimen_collection_location
;+       (comment "The specimen_collection_location element provides the place where the specimen was collected.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot specimen_owner_location
;+       (comment "The specimen_owner_location element provides the institution or laboratory name where the specimen resides.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
  (single-slot specimen_owner_name
;+       (comment "The specimen_owner_name element identifies the individual or laboratory to whom the specimen belongs.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
)
(defclass Ancillary_Product "The Ancillary_Product class identifies an ancillary measurement related to a Spectral Library specimen."
  (is-a USER)
  (role concrete)
  (single-slot ancillary_product_type
;+       (comment "The ancillary_product_type element provides the type of data found in an ancillary product.")
    (type STRING)
;+        (cardinality 1 1)
    (create-accessor read-write)
;+		(value "Attenuated_Total_Reflectance_Spectroscopy" "Chemical_Composition" "Differential_Scanning_Calorimetry" "Electron_Microprobe_Analysis" "Image" "Modal_Mineralogy" "Raman_Spectroscopy" "Reflectance_Spectroscopy" "Thermogravimetric_Analysis" "Transmission_Spectroscopy" "X-ray_Diffraction" "X-ray_Fluorescence" )
  )
)
(defclass Spectral_Library_Product "The Spectral_Library_Product class provides information about a data product in the Spectral Library."
  (is-a USER)
  (role concrete)
  (single-slot processing_description
;+       (comment "The processing_description element provides information about how measurement%28s%29 for a particular product were made, in addition to the information given in the Measurement Parameters class. In the case of a product created by merging multiple measurements, this element describes how the merge was done.")
    (type TBD_Protege_Type)
;+        (cardinality 0 1)
    (create-accessor read-write)
  )
  (single-slot measurement_segments
;+       (comment "The measurement_segments element gives the number of measurement segments that were combined to create the spectrum. If the spectrum is not merged from multiple segments, then the value of measurement_segments is 1.")
    (type INTEGER)
;+        (cardinality 1 1)
    (create-accessor read-write)
  )
)
